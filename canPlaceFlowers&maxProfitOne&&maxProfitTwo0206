Q:

假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。

给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。

示例 1:

输入: flowerbed = [1,0,0,0,1], n = 1
输出: True
示例 2:

输入: flowerbed = [1,0,0,0,1], n = 2
输出: False
注意:

数组内已种好的花不会违反种植规则。
输入的数组长度范围为 [1, 20000]。
n 是非负整数，且不会超过输入数组的大小

S:

bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n){
    int new[200001]={0};
    int k=0;
    for(int i=1;i<flowerbedSize+1;i++)
    {
        new[i]=flowerbed[i-1];
    }
    for(int i=1;i<flowerbedSize+1;i++)
    {
        if(new[i]==0&&new[i-1]==0&&new[i+1]==0)
        {
            k=k+1;
            new[i]=1;
        }

    }
if(k>=n)
return true;
else
return false;
}


NOTE:
1.在寻找可以的位置时，在找到后要注意把合适的变成1.否则会重复找到，不符合题意。

Q:

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

S:
int maxProfit(int* prices, int pricesSize){
    int max=0;
    for(int i=0;i<pricesSize;i++)
    {
        for(int j=i+1;j<pricesSize;j++)
        {
            int now=0;
            now=prices[j]-prices[i];
            if(now>max)
            {
                max=now;
            }
        }
    }
    return max;

}

Q:

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票
     
S:
 int maxProfit(int* prices, int pricesSize){
    short i;
    int profit=0;
    for(i=0;i<pricesSize-1;i++)
        if(prices[i]<prices[i+1])
            profit=profit+prices[i+1]-prices[i];
    return profit;
}


NOTE:
1.这个方法简单去、且正确，但没找到相应的逻辑解释。

