Q:

给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的 原地 算法。

S:

void rotate(int* nums, int numsSize, int k){
    if(k<numsSize)
    {
         for(int i=0,j=numsSize-1;i<=j;i++,j--)
    {
        int temp=0;
        temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;

    }
    for(int i=0,j=k-1;i<=j;i++,j--)
    {
        int temp1=0;
        temp1=nums[i];
        nums[i]=nums[j];
        nums[j]=temp1;
    }
     for(int i=k,j=numsSize-1;i<=j;i++,j--)
    {
        int temp2=0;
        temp2=nums[i];
        nums[i]=nums[j];
        nums[j]=temp2;
    }
    }
    if(k>numsSize)
    {
        k=k-numsSize;
    for(int i=0,j=numsSize-1;i<=j;i++,j--)
    {
        int temp=0;
        temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;

    }
     for(int i=0,j=k-1;i<=j;i++,j--)
    {
        int temp1=0;
        temp1=nums[i];
        nums[i]=nums[j];
        nums[j]=temp1;
    }
     for(int i=k,j=numsSize-1;i<=j;i++,j--)
    {
        int temp2=0;
        temp2=nums[i];
        nums[i]=nums[j];
        nums[j]=temp2;
    }
   
   
    }
    
}

NOTE:
1.最初的暴力循环法，时间复杂度高，超出时间限制，所以找到了三次循环的方法，让时间复杂度为o（1）。
2.没有考虑到k》=numsize的情况，导致出错，而且在判断时，第一个if下的k=k-numsize会让第二个if成立，再旋转一编，调一下两个if的顺序即可。
3.可以用两个参数i，j来旋转数组，不必找临界点了。
 
